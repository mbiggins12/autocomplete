{
    "collab_server" : "",
    "contents" : "library(dplyr)\nlibrary(plotly)\nlibrary(Quandl)\n\n# ---------------------------------------------------------------------------------------------------------------------\n# SERVER\n# ---------------------------------------------------------------------------------------------------------------------\n\ncache = list()\n\nserver <- function(input, output) {\n  observe({\n    input$smooth\n    message(\"Keeping track of smoothing...\")\n  })\n  stock.data <- reactive({\n    ticker <- input$ticker\n    if (!(ticker %in% names(cache))) {\n      message(\"Data not in cache. Retrieving now.\")\n      cache[[ticker]] <<- stocks <- Quandl(paste0(\"WIKI/\", ticker), collapse = \"weekly\") %>%\n        dplyr::rename(date = Date, adj_close = `Adj. Close`) %>%\n        dplyr::select(date, adj_close)\n    }\n    cache[[ticker]]\n  })\n  output$stockPlot <- renderPlotly({\n    stocks <- stock.data()\n    p <- plot_ly(stocks, x = date, y = adj_close, name = \"raw\") %>%\n      layout(\n        showlegend = F,\n        xaxis = list(title = NA),\n        yaxis = list(title = \"Adjusted Close\")\n      )\n    if (input$smooth) {\n      p <- add_trace(p, y = fitted(loess(adj_close ~ as.numeric(date), span = max(input$span, 0.01))), x = date, name = \"smoothed\")\n    }\n    p\n  })\n  output$recentQuote <- renderText({\n    recent <- head(stock.data(), 1)\n    #\n    sprintf(\"Adjusted close price on %s was %.2f.\", recent$date, recent$adj_close)\n  })\n}\n# ---------------------------------------------------------------------------------------------------------------------\n# INTERFACE\n# ---------------------------------------------------------------------------------------------------------------------\n\nui <- fluidPage(\n  titlePanel(\"Ticker Data\"),\n  sidebarPanel(\n    selectInput(\"ticker\", \"Stock\", width = NULL,\n                choices = c(\"AAPL\", \"AMD\", \"RDEN\", \"REV\", \"CYTK\", \"REXI\", \"CMA\")\n    ),\n    checkboxInput(\"smooth\", \"Smooth\", value = TRUE),\n    # Display this only if smoothing is activated.\n    conditionalPanel(\n      condition = \"input.smooth == true\",\n      sliderInput(\"span\", \"Smoother Span\", min = 0, max = 1, value = 0.5)\n    )\n  ),\n  mainPanel(\n    plotlyOutput(\"stockPlot\"),\n    textOutput(\"recentQuote\")\n  )\n)\n\n# ---------------------------------------------------------------------------------------------------------------------\n\nshinyApp(ui = ui, server = server)",
    "created" : 1471256389577.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3707418609",
    "id" : "F11BAD77",
    "lastKnownWriteTime" : 1470990585,
    "last_content_update" : 1470990585,
    "path" : "~/Documents/Data Science/Week 3/Day 15/Shiny.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}