{
    "collab_server" : "",
    "contents" : "#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nui <- dashboardPage(skin = \"red\",\n  dashboardHeader(title = \"AutoComplete\", \n    # need to make this dynamic, but this is for demonstration purposes\n    dropdownMenu(type = \"messages\", \n                 messageItem(from = \"Sales Dept\", message = \"Sales are steady this month.\", \n                             icon = icon(\"bar-chart\"), time = \"13:45\")\n    ),\n    dropdownMenu(type = \"notifications\",\n                 notificationItem(text = \"5 new users today\", icon(\"users\")),\n                 notificationItem(text = \"12 items delivered\", icon(\"truck\"), status = \"success\")\n    ),\n    dropdownMenu(type = \"tasks\", badgeStatus = \"success\", \n                 taskItem(value = 90, color = \"green\", \"Documentation\"),\n                 taskItem(value = 17, color = \"aqua\", \"Project X\"),\n                 taskItem(value = 75, color = \"yellow\", \"Server deployment\"),\n                 taskItem(value = 80, color = \"red\", \"Overall project\")\n    )\n  ),\n  dashboardSidebar(\n    sidebarSearchForm(textId = \"searchText\", buttonId = \"searchButton\", label = \"Search...\"),\n    sidebarMenu(\n      # These can be dynamically allocated as well\n      menuItem(\"Data Import\", tabName = \"dataimport\", icon = icon(\"database\")),\n      menuItem(\"Tables | Graphs\", tabName = \"tabgraph\", icon = icon(\"bar-chart\")),\n      menuItem(\"Report\", tabName = \"report\", icon = icon(\"file-text\"))\n    )\n  ),\n  dashboardBody(\n    tabItems(\n      # First tab content\n      tabItem(tabName = \"dataimport\",\n        pageWithSidebar(\n          headerPanel(\"\"),\n          sidebarPanel(\n            fileInput('file1', 'Choose CSV File', \n                      accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),\n            tags$hr(),\n            checkboxInput('header', 'Header', TRUE),\n            radioButtons('sep', 'Separator',c(Comma=',', Semicolon=';', Tab='\\t'), 'Comma'),\n            radioButtons('quote', 'Quote', c(None='', 'Double Quote'='\"', 'Single Quote'=\"'\"), 'Double Quote')\n          ),\n          mainPanel(\n            tableOutput('contents'),\n            tableOutput('colref')\n          )\n        )\n      ),\n      # Second tab content\n      tabItem(tabName = \"tabgraph\",\n              sidebarLayout(\n                sidebarPanel(\n                  sliderInput(\"bins\",\n                              \"Number of bins:\",\n                              min = 1,\n                              max = 50,\n                              value = 30)\n                ),\n                \n                # Show a plot of the generated distribution\n                mainPanel(\n                  plotOutput(\"distPlot\")\n                )\n              )\n      ),\n      # Third tab content\n      tabItem(tabName = \"report\",\n              h2(\"Report Content\")\n      )\n    )\n  )\n)\nserver <- function(input, output) {\n  # these can only be done inside a reactive expression\n    #input$searchText\n    #input$searchButton\n  output$contents <- renderTable({\n    \n    # input$file1 will be NULL initially. After the user selects and uploads a \n    # file, it will be a data frame with 'name', 'size', 'type', and 'datapath' \n    # columns. The 'datapath' column will contain the local filenames where the \n    # data can be found.\n    \n    inFile <- input$file1\n    \n    if (is.null(inFile))\n      return(NULL)\n      read.csv(inFile$datapath, header=input$header, sep=input$sep, quote=input$quote)\n  })\n  output$distPlot <- renderPlot({\n    \n    # generate bins based on input$bins from ui.R\n    x    <- faithful[, 2]\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    \n  })\n}\n\nshinyApp(ui, server)\n",
    "created" : 1471270785434.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1231752732",
    "id" : "5562707E",
    "lastKnownWriteTime" : 1471375003,
    "last_content_update" : 1471375003538,
    "path" : "~/Documents/Data Science/Week 4/Project 4/dashboard/app.R",
    "project_path" : "dashboard/app.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}